{"version":3,"sources":["images/header.jpg","images/ping-pong-table.png","data/functions/shuffle.js","data/functions/split.js","data/functions/score.js","data/initial.js","data/reducer.js","data/functions/winners.js","data/store.js","components/Header/Header.js","data/actions/state.js","components/Header/Header.wrap.js","components/Player/Player.js","components/Player/Player.wrap.js","components/Settings/Settings.js","components/Settings/Settings.wrap.js","components/Score/Score.js","components/Score/Score.wrap.js","components/Game/Game.js","components/Game/Game.wrap.js","components/Round/Round.js","components/Round/Round.wrap.js","components/Results/Results.js","components/Results/Results.wrap.js","components/App/App.js","components/App/App.wrap.js","index.js"],"names":["module","exports","shuffle","players","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","split","result","teams","push","splice","findGame","array","id","filter","game","find","player","findGameIndex","findIndex","valid","games","newScore","winningScore","gameArray","gameIndex","playerAltIndex","findPlayerAltIndex","altScore","played","check1","abs","check2","check3","check4","check5","check6","validateScore","score","findOpponentScore","hasOpponentPlayed","initial","idCounter","history","roundCounter","settingsView","gamesView","resultsView","roundComplete","tournamentComplete","state","updatedGames","playerIndex","findPlayerIndex","copyTournament","newGamesArray","flatMap","map","some","el","reducer","action","type","name","newPlayer","newName","index","editMode","editPlayer","deletePlayer","newPlayers","newTournament","viewTournament","viewResults","round","resetPlayed","reduce","winner","shuffleWinners","newRound","endTournament","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","persistState","headerStyle","backgroundImage","Background","Header","props","handleSettings","bind","handleTournament","handleResults","this","className","style","onClick","Component","viewSettings","values","connect","dispatch","Player","error","handleEditMode","handleChange","handleNameError","handleEdit","handleDelete","editPlayerMode","setState","e","currentTarget","value","preventDefault","setTimeout","count","onSubmit","RegExp","test","isName","htmlFor","onChange","Settings","errorName","errorTournament","handleChangeName","handleSubmitName","handleChangeScore","handleTournamentError","handleSubmitTournament","handleName","n","i","pow","isPowerOf2","key","Score","handleError","handleSubmit","handleScore","required","icon","faPlus","addScore","gameBackground","Table","Game","Round","handleNewRound","handleFinish","display","Results","handleReset","reset","reverseHistory","reverse","width","print","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ba06f04b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header.0cff5dd9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ping-pong-table.447178eb.png\";","// the purpose of this function to shuffle an array\n// the application of this functon is to take an array of player objects and shuffle them into a random order\n\nexport const shuffle = players => {\n\n    let currentIndex = players.length;\n    let temporaryValue, randomIndex;\n\n    while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        temporaryValue = players[currentIndex];\n        players[currentIndex] = players[randomIndex];\n        players[randomIndex] = temporaryValue;\n    }\n\n    return players;\n};","// the purpose of this function to split an array into chunks\n// the application of this functon is to split an array of player objects into multiple games\n\nexport const split = players => {\n    let result = [];\n    let teams = Math.floor(players.length / (players.length / 2));\n\n    while (players.length) {\n        result.push(players.splice(0, teams));\n    }\n\n    return result;\n};","/*\n * Score functions *\n ***********/\n\nconst findGame = (array, id) => (array.filter(game => game.find(player => player.id === id)))[0];\n\nconst findGameIndex = (array, id) => array.findIndex(game => game.find(player => player.id === id));\n\nconst findPlayerIndex = (array, id) => array.findIndex(player => player.id === id);\n\nconst findPlayerAltIndex = (array, id) => array.findIndex(player => player.id !== id);\n\nconst findOpponentScore = (array, gameIndex, playerAltIndex) => array[gameIndex][playerAltIndex].score;\n\nconst hasOpponentPlayed = (array, gameIndex, playerAltIndex) => array[gameIndex][playerAltIndex].played;\n\nconst validateScore = (newScore, altScore, winningScore, played) => {\n    let check1 = Math.abs(newScore - altScore) >= 2;\n\n    let check2 = ((newScore >= winningScore) || (altScore >= winningScore));\n\n    let check3 = newScore >= 0;\n\n    let check4 = newScore > altScore && altScore >= winningScore ? !(newScore > altScore && Math.abs(newScore - altScore) > 2) : true;\n\n    let check5 = newScore > altScore && altScore < winningScore ? !(newScore > winningScore && Math.abs(newScore - altScore) > 2) : true;\n\n    let check6 = altScore > winningScore ? Math.abs(newScore - altScore) === 2 : true;\n\n    let check7 = !(newScore === 0 && altScore === 0);\n\n    return played ? !(check1 && check2 && check3 && check4 && check5 && check6 && check7) : !(check3);\n}\n\n// all-in-one validation function to be exported and used in Score component\nexport const valid = (games, newScore, winningScore, id) => {\n    let gameArray = findGame(games, id);\n    let gameIndex = findGameIndex(games, id);\n    let playerAltIndex = findPlayerAltIndex(gameArray, id);\n    let playerAltScore = findOpponentScore(games, gameIndex, playerAltIndex);\n    let playerAltPlayed = hasOpponentPlayed(games, gameIndex, playerAltIndex);\n    return validateScore(+newScore, +playerAltScore, winningScore, playerAltPlayed);\n};\n\n// all-in-one function to return a copy of games array with new score added\nexport const newGamesArray = (games, id, score) => {\n    let gameArray = findGame(games, id);\n    let gameIndex = findGameIndex(games, id);\n    let playerIndex = findPlayerIndex(gameArray, id);\n    let copyTournament = [...games];\n    copyTournament[gameIndex][playerIndex].score = score;\n    copyTournament[gameIndex][playerIndex].played = true;\n    return copyTournament;\n};","const initial = {\n    idCounter: 0,\n    players: [],\n    games: [],\n    history: [],\n    roundCounter: 1,\n    winningScore: \"\",\n    settingsView: true,\n    gamesView: false,\n    resultsView: false,\n    roundComplete: false,\n    tournamentComplete: false,\n};\n\nexport default initial;","import { shuffle } from \"./functions/shuffle\";\nimport { split } from \"./functions/split\";\nimport { newGamesArray } from \"./functions/score\";\nimport { winners } from \"./functions/winners\";\nimport initial from \"./initial\";\n\nconst newPlayer = (state, { name }) => {\n    return {\n        ...state,\n        idCounter: state.idCounter + 1,\n        players: [\n            ...state.players,\n            {\n                \"id\": state.idCounter + 1,\n                \"name\": name,\n                \"editMode\": false,\n                \"score\": 0,\n                \"played\": false,\n            }\n        ],\n    };\n};\n\nconst editPlayer = (state, { newName, id }) => {\n    let players = state.players; \n    let index = players.findIndex(player => player.id === id);    \n    players.splice(index, 1, {\n        ...players[index],\n        name: newName,\n        editMode: false,\n    });\n    \n    return {\n        ...state,\n        players: [\n            ...players\n        ],\n    };\n};\n\nconst deletePlayer = (state, { id }) => {\n    let players = state.players;\n    let index = players.findIndex(player => player.id === id);\n    players.splice(index, 1);\n\n    return {\n        ...state,\n        players: [\n            ...players,\n        ],\n    };\n};\n\nconst editMode = (state, { id }) => {\n    let players = state.players;\n    let index = players.findIndex(player => player.id === id);\n    players[index].editMode = true;\n\n    return {\n        ...state,\n        players: [\n            ...players,\n        ]\n    };\n};\n\nconst newTournament = (state, { winningScore }) => {    \n    let players = state.players;\n    let newPlayers = split(shuffle(players));\n    \n    return {\n        ...state,\n        games: [\n            ...newPlayers,\n        ],\n        winningScore: winningScore,\n        settingsView: false,\n        gamesView: true,\n    };\n};\n\nconst viewSettings = () => {\n    return {\n        ...initial,\n        settingsView: true,\n        gamesView: false,\n        resultsView: false,\n    };\n};\n\nconst viewTournament = state => {\n    return {\n        ...state,\n        settingsView: false,\n        gamesView: true,\n        resultsView: false,\n    };\n};\n\nconst viewResults = state => {\n    return {\n        ...state,\n        settingsView: false,\n        gamesView: false,\n        resultsView: true,\n    };\n};\n\nconst score = (state, { newScore, id }) => {\n    let round = state.games;\n    let updatedGames = newGamesArray(round, id, +newScore);\n    let completeCheck = updatedGames.flatMap(game => game.map((player => player.played))).some(el => !el);\n    \n    if (completeCheck) {\n        return {\n            ...state,\n            roundComplete: false,\n            games: [\n                ...updatedGames\n            ],\n        }\n    } else {\n        return {\n            ...state,\n            roundComplete: true,\n            games: [\n                ...updatedGames\n            ],\n        }\n    };\n    // return {\n    //     ...state,\n    //     games: [\n    //         ...updatedGames\n    //     ],\n    // }\n};\n\nconst history = state => {\n    \n    return {\n        ...state,\n        history: [\n            ...state.history,\n            state.games,\n        ],\n    };\n};\n\nconst newRound = state => {\n    let round = state.games;\n    let filterWinners = winners(round);\n    let resetPlayed = filterWinners.map(player => ({\n        ...player,\n        played: false,\n        score: 0,\n    }));    \n    let shuffleWinners = shuffle(resetPlayed);\n    let newRound = split(shuffleWinners);\n\n    return {\n        ...state,\n        games: newRound,\n        roundCounter: state.roundCounter + 1,\n        roundComplete: false,\n    };\n};\n\nconst endTournament = state => {\n\n    return {\n        ...state,\n        settingsView: false,\n        gamesView: false,\n        resultsView: true,\n        roundComplete: false,\n        tournamentComplete: true,\n    };\n};\n\nconst reducer = (state, action) => {    \n    switch (action.type) {\n        case \"NEW_PLAYER\": return newPlayer(state, action);\n        case \"EDIT_PLAYER\": return editPlayer(state, action);\n        case \"DELETE_PLAYER\": return deletePlayer(state, action);\n        case \"EDIT_MODE\": return editMode(state, action);\n        case \"START\": return newTournament(state, action);\n        case \"SETTINGS\": return viewSettings(state, action);\n        case \"TOURNAMENT\": return viewTournament(state, action);\n        case \"RESULTS\": return viewResults(state, action);\n        case \"SCORE\": return score(state, action);\n        case \"NEW_ROUND\": return newRound(state, action);\n        case \"HISTORY\": return history(state, action);\n        case \"END_TOURNAMENT\": return endTournament(state, action);\n        default: return state;\n    }\n}\n\nexport default reducer;","export const winners = (games) => {\n    let result = games.map(game => game.reduce((winner, player) => player.score > winner.score ? player : winner));\n    return result;\n};","import { createStore, compose } from \"redux\";\nimport reducer from \"./reducer\";\nimport initial from \"./initial\";\nimport persistState from \"redux-localstorage\";\n\nconst composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    reducer,\n    initial,\n    composeEnhancers(persistState())\n);\n\nexport default store;","import React, { Component } from \"react\";\nimport Background from \"./../../images/header.jpg\";\n\nlet headerStyle = {\n    backgroundImage: `url(${ Background })`\n}\nclass Header extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSettings = this.handleSettings.bind(this);\n        this.handleTournament = this.handleTournament.bind(this);\n        this.handleResults = this.handleResults.bind(this);\n    };\n\n    handleSettings() {\n        this.props.handleSettings(this.state);\n    };\n\n    handleTournament() {\n        this.props.handleTournament(this.state);\n    };\n\n    handleResults() {\n        this.props.handleResults(this.state);\n    };\n\n    render() {\n        let { settingsView, gamesView } = this.props;\n\n        return (\n            <>\n                <div className=\"page-header p-3\" style={ headerStyle }>\n                    <h2 className=\"m-2 text-center\">Ping Pong Bracket Generator</h2>\n                    {\n                        settingsView ? null :\n                            <ul className=\"nav justify-content-center\">\n                                <li onClick={ this.handleSettings } className=\"nav-item m-2\">New Tournament</li>\n                                {\n                                    gamesView ? null :\n                                        <li onClick={ this.handleResults } className=\"nav-item m-2\">Score Board</li>\n                                }\n                            </ul>\n                    }\n                    \n                </div>\n            </>\n        )\n    };\n};\n\nexport default Header;","export const newPlayer = values => {    \n    return {\n        type: \"NEW_PLAYER\",\n        ...values,\n    };\n};\n\nexport const editPlayer = (values, id) => {\n    \n    return {\n        type: \"EDIT_PLAYER\",\n        ...values, \n        id,\n    };\n};\n\nexport const deletePlayer = (id) => {\n    return {\n        type: \"DELETE_PLAYER\",\n        id,\n    };\n};\n\nexport const editMode = (values, id) => {\n    return {\n        type: \"EDIT_MODE\",\n        ...values,\n        id,\n    };\n};\n\nexport const newTournament = values => {\n    return {\n        type: \"START\",\n        ...values,\n    };\n};\n\nexport const viewSettings = values => {\n    return {\n        type: \"SETTINGS\",\n        ...values,\n    };\n};\n\nexport const viewTournament = values => {\n    return {\n        type: \"TOURNAMENT\",\n        ...values,\n    };\n};\n\nexport const viewResults = values => {\n    return {\n        type: \"RESULTS\",\n        ...values,\n    };\n};\n\nexport const addScore = (values, id) => {\n    return {\n        type: \"SCORE\",\n        ...values,\n        id,\n    };\n};\n\nexport const newRound = () => {\n    return {\n        type: \"NEW_ROUND\",\n    };\n};\n\nexport const endTournament = () => {\n    return {\n        type: \"END_TOURNAMENT\",\n    };\n};\n\nexport const history = () => {\n    return {\n        type: \"HISTORY\",\n    };\n};","import { connect } from \"react-redux\";\nimport Header from \"./Header\";\nimport { viewSettings, viewTournament, viewResults } from \"./../../data/actions/state\";\n\nconst mapStateToProps = ({ settingsView, gamesView }) => ({\n    settingsView,\n    gamesView,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    handleSettings: values => dispatch(viewSettings(values)),\n    handleTournament: values => dispatch(viewTournament(values)),\n    handleResults: values => dispatch(viewResults(values)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header)","import React, { Component } from \"react\";\n\nclass Player extends Component {\n    constructor(props) {\n        super(props);\n        // we can make use of onChange event handlers to update the mutable state within a controlled component \n        this.state = {\n            newName: \"\",\n            error: false,\n        };\n        this.handleEditMode = this.handleEditMode.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleNameError = this.handleNameError.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n    };\n\n    // the handleEditMode method is called by the onSubmit event handler within the rendered form component when the user clicks the edit button \n    handleEditMode(id) {\n        let {name } = this.props; \n        // the editMode prop is mapped from the component wrapper\n        // when called it will dispatch the editPlayer action (see`Player.wrap.js`)\n        // this class method is accepting the id prop as an argument and passing it into the prop function as a parameter\n        // so the reducer function will know which player it should edit in the players array stored in global state\n        this.props.editPlayerMode(this.state, id);\n        this.setState({ newName: name });\n    };\n\n    // the handleChange method is used to update the mutable state property `newName` when the user is typing \n    handleChange(e) {\n        // we set the state of newName to equal the current value of the input field \n        this.setState({ newName: e.currentTarget.value });\n    };\n\n    // the handleNameError method is called by the onSubmit event handler within the rendered form component \n    // when the user clicks the done button, and only if the input validation fails\n    handleNameError(e) {\n        e.preventDefault();\n        this.setState({\n            error: true,\n            newName: \"\",\n        });\n        setTimeout(() => this.setState({ error: false }), 2000);\n    };\n\n    handleEdit(e, id) {\n        e.preventDefault();\n        this.props.editPlayer(this.state, id);\n        this.setState({ error: false })\n    };\n\n    handleDelete(id) {\n        // the handleDelete prop is mapped from the component wrapper\n        // when called it will dispatch the deletePlayer action (see`Player.wrap.js`)\n        // this class method is accepting the id prop as an argument and passing it into the prop function a parameter\n        // so the reducer function will know which player it should delete from the players array stored in global state\n        this.props.deletePlayer(id);\n    };\n\n    render() {\n        let { newName, error } = this.state;\n        let { id, name, editMode, count } = this.props; \n        // we can make use of regular expressions to validate form inputs, in this case a person's name\n        const isName = name => RegExp(\"^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$\", \"g\").test(name);\n\n        return (\n            <>\n                {\n                    !editMode ? \n                    // if the editMode property of the player object currently being mapped over is false, \n                    // we display the name of the player, along with the edit and delete buttons\n                    <li className=\"list-group-item\">\n                            <span className=\"d-inline-block\">{ count + 1 } .&nbsp; { name }</span>\n                        <span onClick={ () => this.handleDelete(id) } className=\"btn btn-danger btn-sm float-right mx-2\">Delete</span>\n                        <span onClick={ () => this.handleEditMode(id) } className=\"btn btn-warning btn-sm float-right mx-2\">Edit</span>\n                    </li> :\n                    // if the editMode property of the player object currently being mapped over is true, \n                    // we display a form to edit the name of the player, along with a done button\n                    // validation check in ternary operator - if name input is valid, edit the name, otherwise generate error message \n                    <li className=\"list-group-item\">\n                        <form onSubmit={ isName(newName) ? (e) => this.handleEdit(e, id) : this.handleNameError } className=\"form\">\n                            <div className=\"float-left\">\n                                <label htmlFor=\"editPlayer\" className=\"help-block\">Edit Player Name</label>\n                                <input type=\"text\" id=\"editPlayer\" className=\"form-control\" onChange={ this.handleChange } value={ newName } />\n                            </div>\n                            <button className=\"btn btn-success btn-sm float-right mx-2\">Done</button>\n                        </form>\n                    </li>\n                }\n\n                {\n                    // display error message if name input was invalid \n                    !error ? null : <p className=\"alert alert-danger m-0 rounded-0\">Please enter a valid name</p>\n                }\n            </>\n        );\n    };\n};\n\nexport default Player;","import { connect } from \"react-redux\";\nimport Player from \"./Player\";\nimport { editPlayer, deletePlayer, editMode } from \"./../../data/actions/state\";\n\nconst mapStateToProps = ({ players }) => ({\n    players,\n}); \n\nconst mapDispatchToProps = dispatch => ({\n    // this updates the name of the player in state \n    editPlayer: (values, id) => dispatch(editPlayer(values, id)),\n    deletePlayer: (id) => dispatch(deletePlayer(id)),\n    // editMode allows me to update what's displayed in the Player component when the user clicks 'Edit' next to each player name\n    // by changing the editMode for a specific player in the 'players' array in state, the user is able to update a single player's name by the player's id\n    editPlayerMode: (values, id) => dispatch(editMode(values, id)), \n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Player);","import React, { Component } from \"react\";\nimport Player from \"./../Player/Player.wrap\";\n\nclass Settings extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: \"\",\n            name: \"\",\n            winningScore: 11,\n            errorName: false,\n            errorTournament: false,\n        };\n        this.handleChangeName = this.handleChangeName.bind(this);\n        this.handleNameError = this.handleNameError.bind(this);\n        this.handleSubmitName = this.handleSubmitName.bind(this);\n        this.handleChangeScore = this.handleChangeScore.bind(this);\n        this.handleTournamentError = this.handleTournamentError.bind(this);\n        this.handleSubmitTournament = this.handleSubmitTournament.bind(this);\n    };\n\n    handleChangeName(e) {\n        this.setState({ name: e.currentTarget.value });\n    };\n\n    handleNameError(e) {\n        e.preventDefault();\n        this.setState({\n            errorName: true,\n            name: \"\",\n        });\n        setTimeout(() => this.setState({ errorName: false }), 4000);\n    };\n\n    handleSubmitName(e) {\n        e.preventDefault();\n        this.setState({ name: \"\" });\n        this.props.handleName(this.state);\n    };\n\n    handleChangeScore(e) {\n        this.setState({ winningScore: e.currentTarget.value });\n    };\n    \n    handleTournamentError(e) {\n        e.preventDefault();\n        this.setState({ errorTournament: true });\n        setTimeout(() => this.setState({ errorTournament: false }), 4000);\n    };\n\n    handleSubmitTournament(e) {\n        e.preventDefault();\n        this.props.handleTournament(this.state);\n        this.setState({ errorTournament: false });\n    };\n    \n    render() {\n        let { name, winningScore, errorTournament, errorName } = this.state;\n        let { players } = this.props;\n\n        const isName = name => RegExp(\"^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$\", \"g\").test(name);\n\n        const isPowerOf2 = n => {\n            for (let i = 1; i < 10; i += 1) {\n                if (Math.pow(2, i) === n) {\n                    return true;\n                };\n            }\n            return false;\n        };\n\n        return (\n            <>\n                <div className=\"p-5 overflow-auto col-md-12\">\n                    <h3 className=\"text-center mb-3\">New Tournament</h3>\n                    <h5 className=\"text-center mb-3\">Please add the names of all your players</h5>\n                    <div className=\"container-settings\">\n                        <div>\n                            <form onSubmit={ isName(name) ? this.handleSubmitName : this.handleNameError } className=\"clearfix\">\n                                <div>\n                                    <label htmlFor=\"names\" className=\"help-block\">Add Player</label>\n                                    <input onChange={ this.handleChangeName } id=\"names\" className=\"form-control\" value={ name } />\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-primary mt-3\">Add</button>\n                                { !errorName ? null : <p className=\"alert alert-danger mt-3\">Please enter a valid name.</p> }\n                            </form>\n\n                            <form onSubmit={ isPowerOf2(players.length) ? this.handleSubmitTournament : this.handleTournamentError } className=\"form mt-3 p-0\">\n                                <label className=\"help-block\">Select winning score</label>\n                                <select onChange={ this.handleChangeScore } className=\"custom-select\" value={ winningScore }>\n                                    <option value=\"11\">11</option>\n                                    <option value=\"21\">21</option>\n                                </select>\n\n                                <input type=\"submit\" className=\"btn btn-success mt-3\" value=\"Start\" />\n                                { !errorTournament ? null : <p className=\"alert alert-danger mt-3\">The number of players must be n<sup>2</sup> (4, 8, 16, 32 etc)</p> }\n                            </form>\n                        </div>\n                        \n                        {\n                            players.length === 0 ? null :\n                                <div>\n                                    <ul className=\"list-group mt-3\">\n                                        {\n                                            players.map((player, count) => (\n                                                <Player key={ player.id } id={ player.id } name={ player.name } editMode={ player.editMode } count={ count } />\n                                            ))\n                                        }\n                                    </ul>\n                                </div>\n                        }\n                        \n                    </div>\n                </div>\n            </>\n        );\n    }\n};\n\nexport default Settings;","import { connect } from \"react-redux\";\nimport Settings from \"./Settings\";\nimport { newPlayer, newTournament } from \"./../../data/actions/state\";\n\nconst mapStateToProps = ({ players }) => ({\n    players,\n}); \n\nconst mapDispatchToProps = dispatch => ({\n    handleName: values => dispatch(newPlayer(values)),\n    handleTournament: values => dispatch(newTournament(values)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings)","import React, { Component } from \"react\";\n// import Font Awesome package and icon(s) \nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { valid } from \"./../../data/functions/score\";\n\nclass Score extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newScore: \"\",\n            error: false,\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleError = this.handleError.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    };\n\n    handleChange(e) {\n        let { winningScore, games, id } = this.props;\n        let score = e.currentTarget.value;\n\n        this.setState({\n            newScore: score,\n            error: valid(games, +score, winningScore, id),\n        });\n    };\n\n    handleError(e) {\n        e.preventDefault();\n        this.setState({ error: true, newScore: \"\" });\n        setTimeout(() => this.setState({ error: false }), 1000);\n    };\n\n    handleSubmit(e, id) {\n        e.preventDefault();\n        this.props.handleScore(this.state, id);\n        this.setState({ newScore: \"\" });\n    };\n\n    render() {\n        let { newScore, error } = this.state;\n        let { id, score, winningScore, games, played } = this.props;\n        return (  \n            <>\n                {\n                    played ? <h1>{ score }</h1> :\n                \n                    <form onSubmit={ error || valid(games, +newScore, winningScore, id) ? this.handleError : (e) => this.handleSubmit(e, id) }>\n                        <label className=\"d-block\">Add Score</label>\n                        <input \n                            onChange={ this.handleChange } \n                            type=\"number\" \n                            className={ `form-control col-sm-4 d-inline-block ${ error ? \"border border-danger\" : \"\" }` } \n                            value={ newScore } \n                            required\n                        />\n                        <button type=\"submit\" className=\"btn m-2\">\n                            <FontAwesomeIcon icon={ faPlus } />\n                        </button>\n                    </form>\n                }\n            </>\n        );\n    };\n};\n\nexport default Score;","import { connect } from \"react-redux\";\nimport Score from \"./Score\";\nimport { addScore } from \"./../../data/actions/state\";\n\nconst mapStateToProps = ({ winningScore, games }) => ({\n    winningScore,\n    games,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    handleScore: (values, id) => dispatch(addScore(values, id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Score);","import React from \"react\";\nimport Score from \"./../Score/Score.wrap\";\nimport Table from \"./../../images/ping-pong-table.png\";\n\nlet gameBackground = {\n    backgroundImage: `url(${Table})`\n}\n\n// destructure props passed in from parent component\nconst Game = ({ game, players }) => {\n    return ( \n        // this component is accepting it's data from it's parent, which is iterating over the games array\n        // this is the template for outputting the data for each game e.g. players \n        <div className=\"game-container\">\n            <h4>{ game }</h4>\n            <div className=\"game\" style={ gameBackground }>\n            {\n                // mapping over each player per game including the Score component, which allows user to add a score for each player\n                // by passing in the player id, score and played status, I'm able to make use of that data in the Score component when calling my score related functions in the reducer \n                players.map(player => (\n\n                        <div key={ player.id } className=\"player\">\n                            <h5 className=\"pt-2 text-light\">{ player.name }</h5>\n                            <Score id={ player.id } score={ player.score } played={ player.played } />\n                        </div>\n\n                ))\n            }\n            </div>\n        </div>\n    )\n};\n\nexport default Game;","import { connect } from \"react-redux\";\nimport Game from \"./Game\";\n\n// destructure games state property and map into wrapped component as a prop \nconst mapStateToProps = ({ games }) => ({\n    // there's no need to accept `state` as an argument and spell out `games: state.games`\n    // because the key and value pair are identical, so we just write `games` \n    games,\n});\n\nexport default connect(mapStateToProps)(Game)","import React, { Component } from \"react\";\nimport Game from \"./../Game/Game.wrap\";\n\nclass Round extends Component {\n    constructor(props) {\n        super(props);\n        this.handleNewRound = this.handleNewRound.bind(this);\n        this.handleFinish = this.handleFinish.bind(this);\n    };\n\n    handleNewRound(e) {\n        e.preventDefault();\n        this.props.history();\n        this.props.newRound();\n    };\n\n    handleFinish(e) {\n        e.preventDefault();\n        this.props.history();\n        this.props.endTournament();\n    };\n\n    render() {\n        let { games, tournamentComplete, roundCounter, roundComplete } = this.props;\n\n        return tournamentComplete ? null : (\n            <>\n                {\n                    <h2 className=\"round-title\">{ games.length === 1 ? \"Final\" : games.length === 2 ? \"Semifinals\" : games.length === 4 ? \"Quarterfinals\" : `Round ${roundCounter}` }</h2>\n                }\n\n                <div className=\"round-games\" style={ games.length === 1 ? { display: \"inherit\" } : null }>\n                    {\n                        games.map((game, i) => (\n                            <Game key={ i } game={ `Game ${i + 1}` } players={ game } />\n                        ))\n                    }\n                </div>\n\n                <div className=\"clearfix\"></div>\n\n                <div className=\"next-round\">\n                    {\n                        roundComplete ?\n                            games.length === 1 ?\n                                <button onClick={ this.handleFinish } className=\"btn btn-primary\">Finish</button> :\n                                <button onClick={ this.handleNewRound } className=\"btn btn-primary\">Next Round</button> : null\n                    }\n                </div>\n            </>\n        );\n    }\n\n};\n\nexport default Round;\n\n","import { connect } from \"react-redux\";\nimport Round from \"./Round\";\nimport { newRound, endTournament, history } from \"./../../data/actions/state\";\n\nconst mapStateToProps = ({ games, winningScore, tournamentComplete, roundComplete, roundCounter }) => ({\n    games,\n    winningScore,\n    tournamentComplete,\n    roundComplete,\n    roundCounter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    newRound: () => dispatch(newRound()),\n    endTournament: () => dispatch(endTournament()),\n    history: () => dispatch(history()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Round)","import React, { Component } from \"react\";\n\nclass Results extends Component {\n    constructor(props) {\n        super(props);\n        this.handleReset = this.handleReset.bind(this);\n    };\n\n    handleReset() {\n        this.props.reset();\n    }\n\n    render() {\n        let { history } = this.props;\n        let reverseHistory = [...history];\n        reverseHistory.reverse();\n\n        return (\n            <>\n                <div className=\"results\">\n                    <h3>Tournament Results</h3>\n                    {\n                        reverseHistory.map((round, index) => (\n                            <table key={ index + Math.random() } className=\"results-table\">\n                                <thead className=\"results-thead\">\n                                    <tr>\n                                        <th style={ { width: \"33%\" } }>\n                                            { index === 0 ? \"Final\" : index === 1 ? \"Semifinals\" : index === 2 ? \"Quarterfinals\" : `Round ${history.length % 3}` }\n                                        </th>\n                                        <th>Player 1</th>\n                                        <th>Player 2</th>\n                                    </tr>\n                                </thead>\n                                <tbody className=\"results-tbody\">\n                                    {\n                                        round.map((game, index) => (\n\n                                            <tr key={ index + Math.random() }>\n                                                <th style={ { width: \"33%\" } }>Game { index + 1 }</th>\n                                                {\n                                                    game.map(player => (\n                                                        <td key={ player.id } style={ { width: \"33%\" } }>\n                                                            { player.name } &nbsp;\n                                                        <span className=\"badge badge-pill badge-warning\">{ player.score }</span>\n                                                        </td>\n                                                    ))\n                                                }\n                                            </tr>\n\n                                        ))\n                                    }\n                                </tbody>\n                            </table>\n                        ))\n                    }\n                    <div className=\"page-options\">\n                        <button onClick={ () => window.print() } className=\"btn btn-primary\">Print Results</button>\n                        <button onClick={ this.handleReset } className=\"btn btn-success\">Start Over</button>\n                    </div>\n                </div>\n            </>\n        );\n    }\n    \n};\n\nexport default Results;","import { connect } from \"react-redux\";\nimport Results from \"./Results\";\nimport { viewSettings } from \"./../../data/actions/state\";\n\nconst mapStateToProps = ({ history, games, winningScore }) => ({\n    history,\n    games,\n    winningScore\n});\n\nconst mapDispatchToProps = dispatch => ({\n    reset: () => dispatch(viewSettings()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);","import React from \"react\";\n// import Component wrappers to gain access to their Components\nimport Header from \"./../Header/Header.wrap\";\nimport Settings from \"./../Settings/Settings.wrap\";\nimport Round from \"./../Round/Round.wrap\";\nimport Results from \"./../Results/Results.wrap\";\nimport \"./../../css/bootstrap.min.css\";\nimport \"./../../css/style.min.css\";\n\n// destructure props passed in by Component wrapper\nconst App = ({ settingsView, gamesView, resultsView, tournamentComplete }) => (\n    <>\n        <Header />\n        {\n            // only display the settings page if the settingsView prop mapped from state is set to true\n            settingsView ? <Settings /> : null\n        }\n        {\n            // only display the main games page if the gamesView prop mapped from state is set to true\n            gamesView && !tournamentComplete ? <Round /> : null\n        }\n        {\n            // only display the main games page if the gamesView prop mapped from state is set to true\n            resultsView ? <Results /> : null\n        }\n        \n    </>\n);\n\nexport default App;\n","import { connect } from \"react-redux\";\nimport App from \"./App\";\n\nconst mapStateToProps = ({ settingsView, gamesView, resultsView, tournamentComplete }) => ({\n    // mapping these state props to make them available in wrapped component\n    settingsView,\n    gamesView,\n    resultsView,\n    tournamentComplete,\n});\n\nexport default connect(mapStateToProps)(App);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./data/store\";\nimport App from \"./components/App/App.wrap\";\nimport { Provider } from \"react-redux\";\n\n\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}