{"version":3,"sources":["images/header.jpg","images/ping-pong-table.png","data/functions/shuffle.js","data/functions/split.js","data/functions/score.js","data/initial.js","data/reducer.js","data/functions/winners.js","data/store.js","components/Header/Header.js","data/actions/state.js","components/Header/Header.wrap.js","components/Player/Player.js","components/Player/Player.wrap.js","components/Settings/Settings.js","components/Settings/Settings.wrap.js","components/Score/Score.js","components/Score/Score.wrap.js","components/Game/Game.js","components/Game/Game.wrap.js","components/Round/Round.js","components/Round/Round.wrap.js","components/Results/Results.js","components/Results/Results.wrap.js","components/Footer/Footer.js","components/App/App.js","components/App/App.wrap.js","index.js"],"names":["module","exports","shuffle","array","temp","random","index","length","Math","floor","split","players","result","teams","push","splice","findGame","id","filter","game","find","player","findGameIndex","findIndex","valid","games","newScore","winningScore","gameArray","gameIndex","playerAltIndex","findPlayerAltIndex","altScore","played","check1","abs","check2","check3","check4","check5","check6","validateScore","score","findOpponentScore","hasOpponentPlayed","initial","idCounter","history","roundCounter","settingsView","gamesView","resultsView","roundComplete","tournamentComplete","state","updatedGames","playerIndex","findPlayerIndex","copyGames","newGames","flatMap","map","some","el","reducer","action","type","name","trim","newPlayer","newName","editMode","editPlayer","deletePlayer","newPlayers","newTournament","viewGames","viewResults","round","resetPlayed","reduce","winner","shuffleWinners","newRound","endTournament","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","persistState","headerStyle","backgroundImage","Background","Header","props","handleSettings","bind","handleGames","handleResults","this","className","style","onClick","Component","viewSettings","values","connect","dispatch","Player","error","handleEditMode","handleChange","handleNameError","handleEdit","handleDelete","editPlayerMode","setState","e","currentTarget","value","preventDefault","setTimeout","count","onSubmit","RegExp","test","isName","htmlFor","onChange","isPowerOf2","n","i","pow","Settings","errorName","errorPlayers","handleChangeName","handleSubmitName","handleWinningScore","handlePlayersError","handleSubmitPlayers","handleName","handlePlayers","key","Score","handleError","handleSubmit","handleScore","required","icon","faPlus","addScore","gameBackground","Table","Game","Round","handleNewRound","handleFinish","display","Results","handleReset","reset","reverseHistory","reverse","width","print","Footer","href","target","rel","faExternalLinkAlt","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6cfcb532.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/header.0cff5dd9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ping-pong-table.447178eb.png\";","// the purpose of this function to shuffle an array\n// the application of this functon is to take an array of player objects and shuffle them into a random order\n// this function is based on the Fisher-Yates shuffle algorithm\n\nexport const shuffle = array => {\n\n    let index = array.length;\n    let temp, random;\n\n    while (index !== 0) {\n        random = Math.floor(Math.random() * index);\n        index -= 1;\n\n        temp = array[index];\n        array[index] = array[random];\n        array[random] = temp;\n    };\n\n    return array;\n};","// the purpose of this function to split an array into chunks\n// the application of this functon is to split an array of player objects into multiple games\n\nexport const split = players => {\n    let result = [];\n    let teams = Math.floor(players.length / (players.length / 2));\n\n    while (players.length) {\n        result.push(players.splice(0, teams));\n    }\n\n    return result;\n};","// Score functions\n\n// perhaps the most complex part of the app \n// it involves traversing a multi - dimensional array which is a multi-step process\n// for a better explanation of these functions, see \"./score.notes.js\"\n\nconst findGame = (array, id) => (array.filter(game => game.find(player => player.id === id)))[0];\nconst findGameIndex = (array, id) => array.findIndex(game => game.find(player => player.id === id));\nconst findPlayerIndex = (array, id) => array.findIndex(player => player.id === id);\nconst findPlayerAltIndex = (array, id) => array.findIndex(player => player.id !== id);\nconst findOpponentScore = (array, gameIndex, playerAltIndex) => array[gameIndex][playerAltIndex].score;\nconst hasOpponentPlayed = (array, gameIndex, playerAltIndex) => array[gameIndex][playerAltIndex].played;\n\nconst validateScore = (newScore, altScore, winningScore, played) => {\n    let check1 = Math.abs(newScore - altScore) >= 2;\n    let check2 = ((newScore >= winningScore) || (altScore >= winningScore));\n    let check3 = newScore >= 0;\n    let check4 = newScore > altScore && altScore >= winningScore ? !(newScore > altScore && Math.abs(newScore - altScore) > 2) : true;\n    let check5 = newScore > altScore && altScore < winningScore ? !(newScore > winningScore && Math.abs(newScore - altScore) > 2) : true;\n    let check6 = altScore > winningScore ? Math.abs(newScore - altScore) === 2 : true;\n    let check7 = !(newScore === 0 && altScore === 0);\n\n    return played ? !(check1 && check2 && check3 && check4 && check5 && check6 && check7) : !(check3);\n}\n\n// all-in-one validation function to be exported and used in Score component\nexport const valid = (games, newScore, winningScore, id) => {\n    let gameArray = findGame(games, id);\n    let gameIndex = findGameIndex(games, id);\n    let playerAltIndex = findPlayerAltIndex(gameArray, id);\n    let playerAltScore = findOpponentScore(games, gameIndex, playerAltIndex);\n    let playerAltPlayed = hasOpponentPlayed(games, gameIndex, playerAltIndex);\n\n    return validateScore(+newScore, +playerAltScore, winningScore, playerAltPlayed);\n};\n\n// all-in-one function to return a copy of games array with new score added\nexport const newGames = (games, id, score) => {\n    let gameArray = findGame(games, id);\n    let gameIndex = findGameIndex(games, id);\n    let playerIndex = findPlayerIndex(gameArray, id);\n    let copyGames = [...games];\n    copyGames[gameIndex][playerIndex].score = score;\n    copyGames[gameIndex][playerIndex].played = true;\n\n    return copyGames;\n};","const initial = {\n    idCounter: 0,\n    players: [],\n    games: [],\n    history: [],\n    roundCounter: 1,\n    winningScore: \"\",\n    settingsView: true,\n    gamesView: false,\n    resultsView: false,\n    roundComplete: false,\n    tournamentComplete: false,\n};\n\nexport default initial;","import { shuffle } from \"./functions/shuffle\";\nimport { split } from \"./functions/split\";\nimport { newGames } from \"./functions/score\";\nimport { winners } from \"./functions/winners\";\nimport initial from \"./initial\";\n\nconst newPlayer = (state, { name }) => {\n\n    return {\n        ...state,\n        idCounter: state.idCounter + 1,\n        players: [\n            ...state.players,\n            {\n                \"id\": state.idCounter + 1,\n                \"name\": name.trim(),\n                \"editMode\": false,\n                \"score\": 0,\n                \"played\": false,\n            }\n        ],\n    };\n};\n\nconst editPlayer = (state, { newName, id }) => {\n    let players = state.players; \n    let index = players.findIndex(player => player.id === id);    \n    players.splice(index, 1, {\n        ...players[index],\n        name: newName,\n        editMode: false,\n    });\n    \n    return {\n        ...state,\n        players: [\n            ...players\n        ],\n    };\n};\n\nconst deletePlayer = (state, { id }) => {\n    let players = state.players;\n    let index = players.findIndex(player => player.id === id);\n    players.splice(index, 1);\n\n    return {\n        ...state,\n        players: [\n            ...players,\n        ],\n    };\n};\n\nconst editMode = (state, { id }) => {\n    let players = state.players;\n    let index = players.findIndex(player => player.id === id);\n    players[index].editMode = true;\n\n    return {\n        ...state,\n        players: [\n            ...players,\n        ]\n    };\n};\n\nconst newTournament = (state, { winningScore }) => {    \n    let players = state.players;\n    let newPlayers = split(shuffle(players));\n    \n    return {\n        ...state,\n        games: [\n            ...newPlayers,\n        ],\n        winningScore: winningScore,\n        settingsView: false,\n        gamesView: true,\n    };\n};\n\nconst viewSettings = () => {\n\n    return {\n        ...initial,\n        settingsView: true,\n        gamesView: false,\n        resultsView: false,\n    };\n};\n\nconst viewGames = state => {\n\n    return {\n        ...state,\n        settingsView: false,\n        gamesView: true,\n        resultsView: false,\n    };\n};\n\nconst viewResults = state => {\n\n    return {\n        ...state,\n        settingsView: false,\n        gamesView: false,\n        resultsView: true,\n    };\n};\n\nconst score = (state, { newScore, id }) => {\n    let round = state.games;\n    let updatedGames = newGames(round, id, +newScore);\n    let completeCheck = updatedGames.flatMap(game => game.map((player => player.played))).some(el => !el);\n    \n    if (completeCheck) {\n\n        return {\n            ...state,\n            roundComplete: false,\n            games: [\n                ...updatedGames\n            ],\n        }\n    } else {\n\n        return {\n            ...state,\n            roundComplete: true,\n            games: [\n                ...updatedGames\n            ],\n        }\n    };\n};\n\nconst history = state => {\n    \n    return {\n        ...state,\n        history: [\n            ...state.history,\n            state.games,\n        ],\n    };\n};\n\nconst newRound = state => {\n    let round = state.games;\n    let filterWinners = winners(round);\n    let resetPlayed = filterWinners.map(player => ({\n        ...player,\n        played: false,\n        score: 0,\n    }));    \n    let shuffleWinners = shuffle(resetPlayed);\n    let newRound = split(shuffleWinners);\n\n    return {\n        ...state,\n        games: newRound,\n        roundCounter: state.roundCounter + 1,\n        roundComplete: false,\n    };\n};\n\nconst endTournament = state => {\n    \n    return {\n        ...state,\n        settingsView: false,\n        gamesView: false,\n        resultsView: true,\n        roundComplete: false,\n        tournamentComplete: true,\n    };\n};\n\nconst reducer = (state, action) => {    \n    switch (action.type) {\n        case \"NEW_PLAYER\": return newPlayer(state, action);\n        case \"EDIT_PLAYER\": return editPlayer(state, action);\n        case \"DELETE_PLAYER\": return deletePlayer(state, action);\n        case \"EDIT_MODE\": return editMode(state, action);\n        case \"START\": return newTournament(state, action);\n        case \"SETTINGS\": return viewSettings(state, action);\n        case \"TOURNAMENT\": return viewGames(state, action);\n        case \"RESULTS\": return viewResults(state, action);\n        case \"SCORE\": return score(state, action);\n        case \"NEW_ROUND\": return newRound(state, action);\n        case \"HISTORY\": return history(state, action);\n        case \"END_TOURNAMENT\": return endTournament(state, action);\n        default: return state;\n    }\n}\n\nexport default reducer;","export const winners = (games) => {\n    let result = games.map(game => game.reduce((winner, player) => player.score > winner.score ? player : winner));\n    return result;\n};","import { createStore, compose } from \"redux\";\nimport reducer from \"./reducer\";\nimport initial from \"./initial\";\nimport persistState from \"redux-localstorage\";\n\nconst composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    reducer,\n    initial,\n    composeEnhancers(persistState())\n);\n\nexport default store;","import React, { Component } from \"react\";\nimport Background from \"./../../images/header.jpg\";\n\nlet headerStyle = {\n    // import the header image \n    backgroundImage: `url(${ Background })`\n}\nclass Header extends Component {\n    constructor(props) {\n        super(props);\n        this.handleSettings = this.handleSettings.bind(this);\n        this.handleGames = this.handleGames.bind(this);\n        this.handleResults = this.handleResults.bind(this);\n    };\n\n    handleSettings() {\n        // switch to the new tournament view\n        this.props.handleSettings(this.state);\n    };\n\n    handleGames() {\n        // switch to the games view\n        this.props.handleGames(this.state);\n    };\n\n    handleResults() {\n        // switch to the results view\n        this.props.handleResults(this.state);\n    };\n\n    render() {\n        let { settingsView, gamesView, resultsView } = this.props;\n        // display the header \n        // use the headerStyle object to apply background image using inline styles\n        // create a nav menu which allows user to flick between views, on certain conditions\n        return (\n            <>\n                <div className=\"page-header p-3\" style={ headerStyle }> \n                    <h2 className=\"m-2 text-center\">Ping Pong Bracket Generator</h2>\n                    {\n                        settingsView ? null :\n                            <ul className=\"nav justify-content-center\">\n                                <li onClick={ this.handleSettings } className=\"nav-item m-2\">New Tournament</li>\n                                {\n                                    gamesView || resultsView ? null :\n                                        <li onClick={ this.handleResults } className=\"nav-item m-2\">Score Board</li>\n                                }\n                            </ul>\n                    }\n                    \n                </div>\n            </>\n        )\n    };\n};\n\nexport default Header;","export const newPlayer = values => {    \n    return {\n        type: \"NEW_PLAYER\",\n        ...values,\n    };\n};\n\nexport const editPlayer = (values, id) => {\n    \n    return {\n        type: \"EDIT_PLAYER\",\n        ...values, \n        id,\n    };\n};\n\nexport const deletePlayer = (id) => {\n    return {\n        type: \"DELETE_PLAYER\",\n        id,\n    };\n};\n\nexport const editMode = (values, id) => {\n    return {\n        type: \"EDIT_MODE\",\n        ...values,\n        id,\n    };\n};\n\nexport const newTournament = values => {\n    return {\n        type: \"START\",\n        ...values,\n    };\n};\n\nexport const viewSettings = values => {\n    return {\n        type: \"SETTINGS\",\n        ...values,\n    };\n};\n\nexport const viewGames = values => {\n    return {\n        type: \"TOURNAMENT\",\n        ...values,\n    };\n};\n\nexport const viewResults = values => {\n    return {\n        type: \"RESULTS\",\n        ...values,\n    };\n};\n\nexport const addScore = (values, id) => {\n    return {\n        type: \"SCORE\",\n        ...values,\n        id,\n    };\n};\n\nexport const newRound = () => {\n    return {\n        type: \"NEW_ROUND\",\n    };\n};\n\nexport const endTournament = () => {\n    return {\n        type: \"END_TOURNAMENT\",\n    };\n};\n\nexport const history = () => {\n    return {\n        type: \"HISTORY\",\n    };\n};","import { connect } from \"react-redux\";\nimport Header from \"./Header\";\nimport { viewSettings, viewGames, viewResults } from \"./../../data/actions/state\";\n\nconst mapStateToProps = ({ settingsView, gamesView, resultsView }) => ({\n    settingsView,\n    gamesView,\n    resultsView,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    handleSettings: values => dispatch(viewSettings(values)),\n    handleGames: values => dispatch(viewGames(values)),\n    handleResults: values => dispatch(viewResults(values)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header)","import React, { Component } from \"react\";\n\nclass Player extends Component {\n    constructor(props) {\n        super(props);\n        // we can make use of onChange event handlers to update the mutable state within a controlled component \n        this.state = {\n            newName: \"\",\n            error: false,\n        };\n        this.handleEditMode = this.handleEditMode.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleNameError = this.handleNameError.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n    };\n\n    // the handleEditMode method is called by the onSubmit event handler within the rendered form component when the user clicks the edit button \n    handleEditMode(id) {\n        let {name } = this.props; \n        // the editMode prop is mapped from the component wrapper\n        // when called it will dispatch the editPlayer action (see`Player.wrap.js`)\n        // this class method is accepting the id prop as an argument and passing it into the prop function as a parameter\n        // so the reducer function will know which player it should edit in the players array stored in global state\n        this.props.editPlayerMode(this.state, id);\n        this.setState({ newName: name });\n    };\n\n    // the handleChange method is used to update the mutable state property `newName` when the user is typing \n    handleChange(e) {\n        // we set the state of newName to equal the current value of the input field \n        this.setState({ newName: e.currentTarget.value });\n    };\n\n    // the handleNameError method is called by the onSubmit event handler within the rendered form component \n    // when the user clicks the done button, and only if the input validation fails\n    handleNameError(e) {\n        e.preventDefault();\n        this.setState({\n            error: true,\n            newName: \"\",\n        });\n        setTimeout(() => this.setState({ error: false }), 2000);\n    };\n\n    handleEdit(e, id) {\n        e.preventDefault();\n        this.props.editPlayer(this.state, id);\n        this.setState({ error: false })\n    };\n\n    handleDelete(id) {\n        // the handleDelete prop is mapped from the component wrapper\n        // when called it will dispatch the deletePlayer action (see`Player.wrap.js`)\n        // this class method is accepting the id prop as an argument and passing it into the prop function a parameter\n        // so the reducer function will know which player it should delete from the players array stored in global state\n        this.props.deletePlayer(id);\n    };\n\n    render() {\n        let { newName, error } = this.state;\n        let { id, name, editMode, count } = this.props; \n        // we can make use of regular expressions to validate form inputs, in this case a person's name\n        const isName = name => RegExp(\"^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$\", \"g\").test(name);\n\n        return (\n            <>\n                {\n                    !editMode ? \n                    // if the editMode property of the player object currently being mapped over is false, \n                    // we display the name of the player, along with the edit and delete buttons\n                    <li className=\"list-group-item\">\n                            <span className=\"d-inline-block\">{ count + 1 } .&nbsp; { name }</span>\n                        <span onClick={ () => this.handleDelete(id) } className=\"btn btn-danger btn-sm float-right mx-2\">Delete</span>\n                        <span onClick={ () => this.handleEditMode(id) } className=\"btn btn-warning btn-sm float-right mx-2\">Edit</span>\n                    </li> :\n                    // if the editMode property of the player object currently being mapped over is true, \n                    // we display a form to edit the name of the player, along with a done button\n                    // validation check in ternary operator - if name input is valid, edit the name, otherwise generate error message \n                    <li className=\"list-group-item\">\n                        <form onSubmit={ isName(newName) ? (e) => this.handleEdit(e, id) : this.handleNameError } className=\"form\">\n                            <div className=\"float-left\">\n                                <label htmlFor=\"editPlayer\" className=\"help-block\">Edit Player Name</label>\n                                <input type=\"text\" id=\"editPlayer\" className=\"form-control\" onChange={ this.handleChange } value={ newName } />\n                            </div>\n                            <button className=\"btn btn-success btn-sm float-right mx-2\">Done</button>\n                        </form>\n                    </li>\n                }\n\n                {\n                    // display error message if name input was invalid \n                    !error ? null : <p className=\"alert alert-danger m-0 rounded-0\">Please enter a valid name</p>\n                }\n            </>\n        );\n    };\n};\n\nexport default Player;","import { connect } from \"react-redux\";\nimport Player from \"./Player\";\nimport { editPlayer, deletePlayer, editMode } from \"./../../data/actions/state\";\n\nconst mapStateToProps = ({ players }) => ({\n    players,\n}); \n\nconst mapDispatchToProps = dispatch => ({\n    // this updates the name of the player in state \n    editPlayer: (values, id) => dispatch(editPlayer(values, id)),\n    // this deletes the player from state\n    deletePlayer: (id) => dispatch(deletePlayer(id)),\n    // editPlayerMode allows me to update what's displayed in the Player component when the user clicks 'Edit' next to each player name\n    // by changing the editMode for a specific player in the 'players' array in state, the user is able to update a single player's name by the player's id\n    editPlayerMode: (values, id) => dispatch(editMode(values, id)), \n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Player);","import React, { Component } from \"react\";\nimport Player from \"./../Player/Player.wrap\";\n\nconst isName = name => RegExp(\"^[a-zA-Z]+(([',. -][a-zA-Z ])?[a-zA-Z]*)*$\", \"g\").test(name);\n\nconst isPowerOf2 = n => {\n    for (let i = 1; i < 10; i += 1) {\n        if (Math.pow(2, i) === n) {\n            return true;\n        };\n    }\n    return false;\n};\n\nclass Settings extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            id: \"\",\n            name: \"\",\n            winningScore: 11,\n            errorName: false,\n            errorPlayers: false,\n        };\n        this.handleChangeName = this.handleChangeName.bind(this);\n        this.handleNameError = this.handleNameError.bind(this);\n        this.handleSubmitName = this.handleSubmitName.bind(this);\n        this.handleWinningScore = this.handleWinningScore.bind(this);\n        this.handlePlayersError = this.handlePlayersError.bind(this);\n        this.handleSubmitPlayers = this.handleSubmitPlayers.bind(this);\n    };\n\n    // allows the user to edit the player name\n    handleChangeName(e) {\n        this.setState({ name: e.currentTarget.value });\n    };\n\n    // displays an error and resets the name field if name validation fails\n    handleNameError(e) {\n        e.preventDefault();\n        this.setState({\n            errorName: true,\n            name: \"\",\n        });\n        setTimeout(() => this.setState({ errorName: false }), 4000);\n    };\n\n    // this adds the player name to the players array in state \n    handleSubmitName(e) {\n        e.preventDefault();\n        this.setState({ name: \"\" });\n        this.props.handleName(this.state);\n    };\n\n    // allows the user to change the winning score\n    handleWinningScore(e) {\n        this.setState({ winningScore: e.currentTarget.value });\n    };\n    \n    // the number of players must be a power of 2 e.g. 2, 4, 8, 16, 32... \n    // TODO: it would be good if the app supported any number of players but this would have been a ton more functionality and there just wasn't time - a good idea for the 'features list'\n    handlePlayersError(e) {\n        e.preventDefault();\n        this.setState({ errorPlayers: true });\n        setTimeout(() => this.setState({ errorPlayers: false }), 4000);\n    };\n\n    // this method calls the dispatch action and creates the first round of the new tournament\n    handleSubmitPlayers(e) {\n        e.preventDefault();\n        this.props.handlePlayers(this.state);\n        this.setState({ errorPlayers: false });\n    };\n    \n    render() {\n        let { name, winningScore, errorPlayers, errorName } = this.state;\n        let { players } = this.props;\n\n        return (\n            <>\n                <div className=\"p-5 overflow-auto col-md-12\">\n                    <h3 className=\"text-center mb-3\">New Tournament</h3>\n                    <h5 className=\"text-center mb-3\">Please add the names of all your players</h5>\n                    <div className=\"container-settings\">\n                        <div>\n                            <form onSubmit={ isName(name.trim()) ? this.handleSubmitName : this.handleNameError } className=\"clearfix\">\n                                <div>\n                                    <label htmlFor=\"names\" className=\"help-block\">Add Player</label>\n                                    <input onChange={ this.handleChangeName } id=\"names\" className=\"form-control\" value={ name } />\n                                </div>\n                                <button type=\"submit\" className=\"btn btn-primary mt-3\">Add</button>\n                                { !errorName ? null : <p className=\"alert alert-danger mt-3\">Please enter a valid name</p> }\n                            </form>\n\n                            <form onSubmit={ isPowerOf2(players.length) ? this.handleSubmitPlayers : this.handlePlayersError } className=\"form mt-3 p-0\">\n                                <label htmlFor=\"winningScore\" className=\"help-block\">Select winning score</label>\n                                <select onChange={ this.handleWinningScore } className=\"custom-select\" value={ winningScore } id=\"winningScore\">\n                                    <option value=\"11\">11</option>\n                                    <option value=\"21\">21</option>\n                                </select>\n\n                                <input type=\"submit\" className=\"btn btn-success mt-3\" value=\"Start\" />\n                                { !errorPlayers ? null : <p className=\"alert alert-danger mt-3\">The number of players must be a power of 2 e.g. 2, 4, 8, 16, 32...</p> }\n                            </form>\n                        </div>\n                        \n                        {\n                            // map over the players array in state to display the list of added players\n                            // if players array is empty, display nothing \n                            players.length === 0 ? null :\n                                <div>\n                                    <ul className=\"list-group mt-3\">\n                                        {\n                                            players.map((player, count) => (\n                                                <Player key={ player.id } id={ player.id } name={ player.name } editMode={ player.editMode } count={ count } />\n                                            ))\n                                        }\n                                    </ul>\n                                </div>\n                        }\n                        \n                    </div>\n                </div>\n            </>\n        );\n    }\n};\n\nexport default Settings;","import { connect } from \"react-redux\";\nimport Settings from \"./Settings\";\nimport { newPlayer, newTournament } from \"./../../data/actions/state\";\n\nconst mapStateToProps = ({ players }) => ({\n    players,\n}); \n\nconst mapDispatchToProps = dispatch => ({\n    handleName: values => dispatch(newPlayer(values)),\n    handlePlayers: values => dispatch(newTournament(values)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings)","import React, { Component } from \"react\";\n// import Font Awesome package and icon(s) \nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { valid } from \"./../../data/functions/score\";\n\nclass Score extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newScore: \"\",\n            error: false,\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleError = this.handleError.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    };\n\n    // this method reads the score input field and updates the score for each player \n    handleChange(e) {\n        let { winningScore, games, id } = this.props;\n        let score = e.currentTarget.value;\n\n        this.setState({\n            newScore: score,\n            // error validation is performed on the score as it's entered by the user \n            // the score of one player is compared to the entered score of the opponent\n            // all standard ping-pong scoring logic applies e.g. player must win by at least 2 points, \n            // winning score increments 2 points above winning score, one player must win etc. \n            // this function funs a series of checks to validate the input \n            // function details and all validation checks are here: \"./../../data/functions/score.notes.js\"\n            error: valid(games, +score, winningScore, id),\n        });\n    };\n\n    // if the onChange validation fails but the user still tries to click the Add button, \n    // the ternary check inside the onSubmit event handler will call this method\n    handleError(e) {\n        e.preventDefault();\n        this.setState({ error: true, newScore: \"\" });\n        setTimeout(() => this.setState({ error: false }), 1000);\n    };\n\n    // if the onChange validation succeeds, this method is called when the user clicks the Add button\n    handleSubmit(e, id) {\n        e.preventDefault();\n        // the handleScore action is triggered, sending an action to the reducer to update the player's score \n        this.props.handleScore(this.state, id);\n        // we then reset the local state to avoid the score appearing on the new page \n        this.setState({ newScore: \"\" });\n    };\n\n    render() {\n        let { newScore, error } = this.state;\n        let { id, score, played } = this.props;\n        return (\n            <>\n                {\n                    // TODO: in the future I'd like to be able to edit the score after adding it\n\n                    // if the player's score has already been entered, the score is displayed here...\n                    played ? <h1>{ score }</h1> :\n                        // else we display the input form to the user\n                        // if there's an error with the score, the respective methods are called (as detailed above)\n                        <form onSubmit={ error ? this.handleError : (e) => this.handleSubmit(e, id) }>\n                            <label\n                                htmlFor=\"score\"\n                                className=\"d-block\"\n                            >\n                                Add Score\n                            </label>\n                            {/* if the score fails validation, the input field has a red border */}\n                            <input\n                                id=\"score\"\n                                onChange={ this.handleChange }\n                                type=\"number\"\n                                className={ `form-control col-sm-4 d-inline-block ${error ? \"border border-danger\" : \"\"}` }\n                                value={ newScore }\n                                required\n                            />\n                            <button type=\"submit\" className=\"btn m-2\">\n                                <FontAwesomeIcon icon={ faPlus } />\n                            </button>\n                        </form>\n                }\n            </>\n        );\n    };\n};\n\nexport default Score;","import { connect } from \"react-redux\";\nimport Score from \"./Score\";\nimport { addScore } from \"./../../data/actions/state\";\n\nconst mapStateToProps = ({ winningScore, games }) => ({\n    winningScore,\n    games,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    handleScore: (values, id) => dispatch(addScore(values, id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Score);","import React from \"react\";\nimport Score from \"./../Score/Score.wrap\";\nimport Table from \"./../../images/ping-pong-table.png\";\n\nlet gameBackground = {\n    backgroundImage: `url(${Table})`\n}\n\n// destructure props passed in from parent component\nconst Game = ({ game, players }) => {\n    return ( \n        // this component is accepting it's data from it's parent, which is iterating over the games array\n        // this is the template for outputting the data for each game e.g. players \n        <div className=\"game-container\">\n            <h4>{ game }</h4>\n            <div className=\"game\" style={ gameBackground }>\n            {\n                // map over each player per game including the Score component, which allows user to add a score for each player\n                // by passing in the player id, score and played status, I'm able to make use of that data in the Score component when calling my score related functions in the reducer \n                players.map(player => (\n\n                        <div key={ player.id } className=\"player\">\n                            <h5 className=\"pt-2 text-light\">{ player.name }</h5>\n                            <Score id={ player.id } score={ player.score } played={ player.played } />\n                        </div>\n\n                ))\n            }\n            </div>\n        </div>\n    )\n};\n\nexport default Game;","import { connect } from \"react-redux\";\nimport Game from \"./Game\";\n\n// destructure games state property and map into wrapped component as a prop \nconst mapStateToProps = ({ games }) => ({\n    // there's no need to accept `state` as an argument and spell out `games: state.games`\n    // because the key and value pair are identical, so we just write `games` \n    games,\n});\n\nexport default connect(mapStateToProps)(Game)","import React, { Component } from \"react\";\nimport Game from \"./../Game/Game.wrap\";\n\nclass Round extends Component {\n    constructor(props) {\n        super(props);\n        this.handleNewRound = this.handleNewRound.bind(this);\n        this.handleFinish = this.handleFinish.bind(this);\n    };\n\n    handleNewRound(e) {\n        e.preventDefault();\n        this.props.history();\n        this.props.newRound();\n    };\n\n    handleFinish(e) {\n        e.preventDefault();\n        this.props.history();\n        this.props.endTournament();\n    };\n\n    render() {\n        let { games, tournamentComplete, roundCounter, roundComplete } = this.props;\n\n        // if the tournament is complete, this view will not render \n        return tournamentComplete ? null : (\n            <>\n                {\n                    // this is a similar idea to the results table, only here we're not using a reversed array\n                    // every time a new round is completed, the roundCounter property in state increases by 1\n                    // if the length of the games array is 1, there are 2 players, which means it's the final round\n                    // if the games array length is 2, there are 4 players, which means it's the semifinals round\n                    // if the games arary length is 4, there are 8 players, which means it's the quarterfinals round\n                    // if the games array is any other length, then the round does not have a special name, so we output roundCounter\n                    <h2 className=\"round-title\">{ games.length === 1 ? \"Final\" : games.length === 2 ? \"Semifinals\" : games.length === 4 ? \"Quarterfinals\" : `Round ${roundCounter}` }</h2>\n                }\n\n                <div className=\"round-games\" style={ games.length === 1 ? { display: \"inherit\" } : null }>\n                    {\n                        games.map((game, i) => (\n                            <Game key={ i } game={ `Game ${i + 1}` } players={ game } />\n                        ))\n                    }\n                </div>\n\n                <div className=\"clearfix\"></div>\n\n                <div className=\"next-round\">\n                    {\n                        // every time a new score is added, my reducer checks to see if all players in that round have scored \n                        // if yes, one of the buttons below is displayed, else hidden \n                        // moving to the next round before all scores have been recorded would break the app \n                        roundComplete ?\n                            // if games array length is 1, then it's the last round, so display the Finish button\n                            // else, display the next round button  \n                            games.length === 1 ?\n                                // the finish button calls the class method, which dispatches 2 actions \n                                // the first action, history, saves the last round into history \n                                // the second action, endTournament, switches the view to the scoreboard\n                                <button onClick={ this.handleFinish } className=\"btn btn-primary\">Finish</button> :\n                                // the next round button calls the corresponding class method, which dispatches 2 actions\n                                // the first action is as above\n                                // the second action, newRound, triggers a complex set of functions...\n                                // that filters the winners, shuffles them into a new array and splits them into pairings\n                                <button onClick={ this.handleNewRound } className=\"btn btn-primary\">Next Round</button> : null\n                    }\n                </div>\n            </>\n        );\n    }\n\n};\n\nexport default Round;\n\n","import { connect } from \"react-redux\";\nimport Round from \"./Round\";\nimport { newRound, endTournament, history } from \"./../../data/actions/state\";\n\nconst mapStateToProps = ({ games, winningScore, tournamentComplete, roundComplete, roundCounter }) => ({\n    games,\n    winningScore,\n    tournamentComplete,\n    roundComplete,\n    roundCounter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    newRound: () => dispatch(newRound()),\n    endTournament: () => dispatch(endTournament()),\n    history: () => dispatch(history()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Round)","import React, { Component } from \"react\";\n\nclass Results extends Component {\n    constructor(props) {\n        super(props);\n        this.handleReset = this.handleReset.bind(this);\n    };\n\n    handleReset() {\n        this.props.reset();\n    }\n\n    render() {\n        let { history } = this.props;\n        // reverse the order of the copied history array so the final round displays at the top, not the bottom\n        let reverseHistory = [...history];\n        reverseHistory.reverse(); \n\n        // map over each round of games in the history array and output the scoreboard\n        return (\n            <>\n                <div className=\"results\">\n                    <h3>Tournament Results</h3>\n                    {\n                        reverseHistory.map((round, index) => (\n                            // react gave me a warning about having to use specific keys, and it seemed to not like `index`\n                            // so in the absence of a better alternative, I used `index + Math.random()` to generate a unique key\n                            <table key={ index + Math.random() } className=\"results-table\">\n                                <thead className=\"results-thead\">\n                                    <tr>\n                                        <th style={ { width: \"33%\" } }>\n                                            {\n                                                // a neat trick to display the correct round name/number \n                                                // the history array has been reversed, and is zero indexed... \n                                                // index 0 will always be the final, index 1 = semifinals, index 2 = quarterfinals\n                                                // thereafter we can use modulus on the history array to get the relative number of the remaining rounds\n                                                index === 0 ? \"Final\" : index === 1 ? \"Semifinals\" : index === 2 ? \"Quarterfinals\" : `Round ${history.length % 3}`\n                                            }\n                                        </th>\n                                        <th>Player 1</th>\n                                        <th>Player 2</th>\n                                    </tr>\n                                </thead>\n                                <tbody className=\"results-tbody\">\n                                    {\n                                        // map over the games in each round \n                                        // output the player name and score\n                                        round.map((game, index) => (\n\n                                            <tr key={ index + Math.random() }>\n                                                <th style={ { width: \"33%\" } }>Game { index + 1 }</th>\n                                                {\n                                                    game.map(player => (\n                                                        <td key={ player.id } style={ { width: \"33%\" } }>\n                                                            { player.name } &nbsp;\n                                                        <span className=\"badge badge-pill badge-warning\">{ player.score }</span>\n                                                        </td>\n                                                    ))\n                                                }\n                                            </tr>\n\n                                        ))\n                                    }\n                                </tbody>\n                            </table>\n                        ))\n                    }\n                    <div className=\"page-options\">\n                        {/* I thought it would be a nice touch to be able to print the scoreboard as a record of the tournament */}\n                        <button onClick={ () => window.print() } className=\"btn btn-primary\">Print Results</button>\n                        {/* this loads the start page and resets global state to initial state */}\n                        <button onClick={ this.handleReset } className=\"btn btn-success\">Start Over</button>\n                    </div>\n                </div>\n            </>\n        );\n    }\n    \n};\n\nexport default Results;","import { connect } from \"react-redux\";\nimport Results from \"./Results\";\nimport { viewSettings } from \"./../../data/actions/state\";\n\nconst mapStateToProps = ({ history, games, winningScore }) => ({\n    history,\n    games,\n    winningScore\n});\n\nconst mapDispatchToProps = dispatch => ({\n    reset: () => dispatch(viewSettings()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Results);","import React from \"react\";\n// import Font Awesome package and icon(s) \nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExternalLinkAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Footer = () => (\n    <footer className=\"page-footer\">\n        <a href=\"https://linkedin.com/in/jonathansmithies\" target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon icon={ faExternalLinkAlt } />&nbsp;&nbsp;View on LinkedIn</a>\n        <a href=\"https://github.com/elev8now/Ping-Pong-React-App\" target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon icon={ faExternalLinkAlt } />&nbsp;&nbsp;View code on GitHub</a>\n    </footer>\n)\n\nexport default Footer;","import React from \"react\";\n// import Component wrappers to gain access to their Components\nimport Header from \"./../Header/Header.wrap\";\nimport Settings from \"./../Settings/Settings.wrap\";\nimport Round from \"./../Round/Round.wrap\";\nimport Results from \"./../Results/Results.wrap\";\nimport Footer from \"./../Footer/Footer\";\n// import bootstrap stylesheet\nimport \"./../../css/bootstrap.min.css\";\n// import custom styling\nimport \"./../../css/style.min.css\";\n\n// destructure props passed in by Component wrapper\nconst App = ({ settingsView, gamesView, resultsView, tournamentComplete }) => (\n    <>\n        <Header />\n        {\n            // only display the settings page if the settingsView prop mapped from state is set to true\n            settingsView ? <Settings /> : null\n        }\n        {\n            // only display the main games page if the gamesView prop true and tournamentComplete prop is false\n            gamesView && !tournamentComplete ? <Round /> : null\n        }\n        {\n            // only display the main games page if the resultsView prop mapped from state is set to true\n            resultsView ? <Results /> : null\n        }\n        <Footer />\n        \n    </>\n);\n\nexport default App;\n","import { connect } from \"react-redux\";\nimport App from \"./App\";\n\nconst mapStateToProps = ({ settingsView, gamesView, resultsView, tournamentComplete }) => ({\n    // map state props to make them available in wrapped component\n    settingsView,\n    gamesView,\n    resultsView,\n    tournamentComplete,\n});\n\nexport default connect(mapStateToProps)(App);","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport store from \"./data/store\";\nimport App from \"./components/App/App.wrap\";\nimport { Provider } from \"react-redux\";\n\n\nReactDOM.render(\n    <Provider store={ store }>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}